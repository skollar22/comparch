var_insn_mem(0) := "11111100000000000000000000000000"; -- hlt
var_insn_mem(1) := "11000000000000000010100000000000"; -- swl $5
var_insn_mem(2) := "10111100000001100000000000000000"; -- lui $6, 0
var_insn_mem(3) := "10011100000001100000000011110000"; -- ori $6, $0, 240             # imm = 0xF0
var_insn_mem(4) := "10010000101001100011000100000000"; -- and $6, $5, $6, lsr 4       # <- block 0
var_insn_mem(5) := "10111100000001110000000000000000"; -- lui $7, 0
var_insn_mem(6) := "10011100000001110000111100000000"; -- ori $7, $0, 3840            # imm = 0xF00
var_insn_mem(7) := "10010000101001110011101000000000"; -- and $7, $5, $7, lsr 8       # <- block 1
var_insn_mem(8) := "10111100000010000000000000000000"; -- lui $8, 0
var_insn_mem(9) := "10011100000010001111000000000000"; -- ori $8, $0, 61440           # imm = 0xF000
var_insn_mem(10) := "10010000101010000100001100000000"; -- and $8, $5, $8, lsr 12      # <- block 2
var_insn_mem(11) := "10001100111000000100100000000000"; -- not $9, $7
var_insn_mem(12) := "10111100000010100000000000000000"; -- lui $10, 0
var_insn_mem(13) := "10011100000010100000000000001111"; -- ori $10, $0, 15             # imm = 0xF
var_insn_mem(14) := "10010001001010100011100000000000"; -- and $7, $9, $10             # Make sure the left bits in the 32 bit register are still 0
var_insn_mem(15) := "10111100000010010000000000000000"; -- lui $9, 0
var_insn_mem(16) := "10011100000010010000000000000110"; -- ori $9, $0, 6               # imm = 0b0110
var_insn_mem(17) := "10010000110010010100100001000001"; -- and $9, $6, $9, lsl 1
var_insn_mem(18) := "10111100000010100000000000000000"; -- lui $10, 0
var_insn_mem(19) := "10011100000010100000000000001100"; -- ori $10, $0, 12             # imm = 0b1100
var_insn_mem(20) := "10010000111010100101000001000000"; -- and $10, $7, $10, lsr 1
var_insn_mem(21) := "10111100000010110000000000000000"; -- lui $11, 0
var_insn_mem(22) := "10011100000010110000000000000011"; -- ori $11, $0, 3              # imm = 0b0011
var_insn_mem(23) := "10010000111010110011100000000000"; -- and $7, $7, $11
var_insn_mem(24) := "10010100111010010011100000000000"; -- or $7, $7, $9
var_insn_mem(25) := "10111100000010110000000000000000"; -- lui $11, 0
var_insn_mem(26) := "10011100000010110000000000001001"; -- ori $11, $0, 9              # imm = 0b1001
var_insn_mem(27) := "10010000110010110011000000000000"; -- and $6, $6, $11
var_insn_mem(28) := "10010100110010100011000000000000"; -- or $6, $6, $10
var_insn_mem(29) := "10111100000010100000000000000000"; -- lui $10, 0
var_insn_mem(30) := "10011100000010100000000000001100"; -- ori $10, $0, 12             # imm = 0b1100
var_insn_mem(31) := "10010001000010100100100010000000"; -- and $9, $8, $10, lsr 2
var_insn_mem(32) := "10010101000000000100000010000001"; -- or $8, $8, $0, lsl 2
var_insn_mem(33) := "10011100000100000000000000001111"; -- ori $16, $0, 15             # imm = 0xF
var_insn_mem(34) := "10011100000100010000000011110000"; -- ori $17, $0, 240            # imm = 0xF0
var_insn_mem(35) := "10010001000100011001000100000000"; -- and $18, $8, $17, lsr 4
var_insn_mem(36) := "10010001000100000100000000000000"; -- and $8, $8, $16
var_insn_mem(37) := "10010101000100100100000000000000"; -- or $8, $8, $18              # this new sequence puts the "rotated off" bits back on the end
var_insn_mem(38) := "10010101001010000100000000000000"; -- or $8, $9, $8
var_insn_mem(39) := "10011000110001110011000000000000"; -- xor $6, $6, $7
var_insn_mem(40) := "10011000110010000011000000000000"; -- xor $6, $6, $8
var_insn_mem(41) := "10111100000010010000000000000000"; -- lui $9, 0
var_insn_mem(42) := "10011100000010010000000000001111"; -- ori $9, $0, 15              # imm = 0xF
var_insn_mem(43) := "10010000101010010011100000000000"; -- and $7, $5, $9              # record tag
var_insn_mem(44) := "10010100111000000100101000000001"; -- or $9, $7, $0, lsl 8
var_insn_mem(45) := "10010101001001100100100000000000"; -- or $9, $9, $6
var_insn_mem(46) := "01110001001000000000000000000000"; -- dispr $9
var_insn_mem(47) := "00010000111001100000000000000001"; -- beq $6, $7, 1
var_insn_mem(48) := "00010000000000000000000000001101"; -- beq $0, $0, 13
var_insn_mem(49) := "10111100000010010000000000000000"; -- lui $9, 0
var_insn_mem(50) := "10011100000010010000111111110000"; -- ori $9, $0, 4080            # imm = 0xFF0
var_insn_mem(51) := "10010000101010010100000100000000"; -- and $8, $5, $9, lsr 4       # record tally
var_insn_mem(52) := "10111100000010010000000000000000"; -- lui $9, 0
var_insn_mem(53) := "10011100000010010011000000000000"; -- ori $9, $0, 12288           # imm = 0x3000
var_insn_mem(54) := "10010000101010010100101100000000"; -- and $9, $5, $9, lsr 12      # record candidate ID
var_insn_mem(55) := "11100001001010100000000000000000"; -- lw $10, $9(0)
var_insn_mem(56) := "10000001010010000101000000000000"; -- add $10, $10, $8
var_insn_mem(57) := "01000001001010100000000000000000"; -- sw $10, $9(0)
var_insn_mem(58) := "11100000000000010000000000000000"; -- lw $1, $0(0)
var_insn_mem(59) := "11100000000000100000000000000001"; -- lw $2, $0(1)
var_insn_mem(60) := "11100000000000110000000000000010"; -- lw $3, $0(2)
var_insn_mem(61) := "11100000000001000000000000000011"; -- lw $4, $0(3)
var_insn_mem(62) := "00010000000000000000000010101010"; -- beq $0, $0, 170             # there will be some nops before the halt, not important
